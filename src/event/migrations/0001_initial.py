# Generated by Django 4.2 on 2024-05-03 17:25

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the event", max_length=255),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the event"),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        help_text="Thumbnail image for the event",
                        null=True,
                        upload_to="event_thumbnails/",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[("IN-PERSON", "In Person"), ("VIRTUAL", "Virtual")],
                        help_text="Type of the event",
                        max_length=30,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(help_text="Date and time of the event"),
                ),
                ("duration", models.DurationField(help_text="Duration of the event")),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Location of the event (if in person)",
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("DRAFT", "Draft"), ("SCHEDULED", "Scheduled")],
                        default="draft",
                        help_text="Status of the event",
                        max_length=30,
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the event is approved by admin or not",
                    ),
                ),
                (
                    "max_capacity",
                    models.PositiveIntegerField(
                        default=0, help_text="Maximum capacity of attendees"
                    ),
                ),
                (
                    "allow_comments",
                    models.BooleanField(
                        default=True,
                        help_text="Whether comments are allowed for the event",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the event was created",
                    ),
                ),
                (
                    "updated_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the event was last updated",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the event category",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("icon", models.ImageField(null=True, upload_to="event_category/")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the event category",
                        max_length=255,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether the category is active or not"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField(help_text="Content of the comment")),
                (
                    "reaction",
                    models.CharField(
                        blank=True,
                        help_text="Reaction to the comment (e.g., like, love, etc.)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "is_hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the comment is hidden by the organizer",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the comment was created",
                    ),
                ),
                (
                    "updated_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the comment was last updated",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False, help_text="Whether the comment is archived"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventPlatform",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("Zoom", "Zoom"),
                            ("Google-Meet", "Google Meet"),
                            ("Microsoft-Teams", "Microsoft Teams"),
                            ("WebEx", "WebEx"),
                        ],
                        help_text="Name of the platform",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("link", models.URLField(blank=True, help_text="link of the event")),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Logo of the platform in case of other than standard",
                        null=True,
                        upload_to="platform_logos/",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the tag", max_length=100, unique=True
                    ),
                ),
                (
                    "events",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Events associated with this tag",
                        related_name="tags",
                        to="event.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventSpeaker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        help_text="Photo of the speaker",
                        null=True,
                        upload_to="speaker_photos/",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        help_text="Full name of the speaker", max_length=100
                    ),
                ),
                (
                    "tagline",
                    models.CharField(
                        blank=True,
                        help_text="Tagline or title of the speaker",
                        max_length=200,
                    ),
                ),
                (
                    "about",
                    models.TextField(
                        blank=True, help_text="Description or bio of the speaker"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="Event for which the speakek is related",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="speakers",
                        to="event.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        help_text="Rating provided by the user"
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, help_text="Optional comment or review by the user"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the feedback was provided",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="Event for which the feedback is provided",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedbacks",
                        to="event.event",
                    ),
                ),
            ],
        ),
    ]
